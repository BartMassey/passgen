-- Copyright © 2016 Thomas Løcke
-- Password Generator. Not cryptographically safe.

import Control.Monad
import Control.Monad.Random
import Data.List
import Data.Version
import System.Console.ParseArgs
import System.Exit

-- Auto-generated by cabal.
import qualified Paths_passgen as P

data Option = OptionVersion | OptionHelp | OptionLength
            deriving (Ord, Eq, Show)

argd :: [Arg Option]
argd = [
  Arg { argIndex = OptionVersion,
        argName = Just "version",
        argAbbr = Just 'v',
        argData = Nothing,
        argDesc = "Show program version" },
  Arg { argIndex = OptionHelp,
        argName = Just "help",
        argAbbr = Just 'h',
        argData = Nothing,
        argDesc = "Show this usage message" },
  Arg { argIndex = OptionLength,
        argName = Just "length",
        argAbbr = Just 'l',
        argData = argDataDefaulted "char-count" ArgtypeInt 12,
        argDesc = "Number of chars in generated password" } ]

main :: IO ()
main = do
  args <- parseArgsIO ArgsComplete argd
  when (gotArg args OptionVersion) $ do
    putStrLn $ (argsProgName args) ++ ": version " ++ version
    exitSuccess
  when (gotArg args OptionHelp) $ do
    putStrLn (argsUsage args)
    exitSuccess
  nl <- replicateM (getRequiredArg args OptionLength) $ evalRandIO $ randNum
  putStrLn $ numListToString nl

-- Take a [Int] and produce a String by mapping each Int to validChars
numListToString :: [Int] -> String
numListToString = map $ (!!) validChars

-- Produce a random number
randNum :: (RandomGen g) => Rand g Int
randNum = getRandomR (0, length validChars - 1)

-- The valid characters. The password will be constructed from this pool
validChars :: String
validChars = "abcdefghjkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ123456789_-!#=+/"

-- Produce the version
version :: String
version = intercalate "." $ map show $ versionBranch P.version
